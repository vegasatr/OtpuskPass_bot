import random
import string
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

def generate_referral_code(length: int = 8) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
    characters = string.ascii_uppercase + string.digits
    return ''.join(random.choice(characters) for _ in range(length))

def calculate_next_payment_date(start_date: datetime) -> datetime:
    """–†–∞—Å—á–µ—Ç –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    return start_date + timedelta(days=30)

def format_apartment_info(apartment: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ—Ç –∫–ª—é—á–∏: 'city', 'address', 'area_sqm', 'num_bedrooms',
    'description', 'features', 'nearby_attractions'.
    –ü–æ–ª–µ 'amenities' —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–µ–Ω–æ –≤ 'description'.
    """
    return f"""
üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ {apartment.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

üìç –ê–¥—Ä–µ—Å: {apartment.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìê –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: {apartment.get('area_sqm', 'N/A')} –º¬≤
üõè –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω: {apartment.get('num_bedrooms', 'N/A')} (–≤—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ–¥–Ω–æ—Å–ø–∞–ª—å–Ω—ã–µ)

–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã:
{apartment.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

–í –∫–≤–∞—Ä—Ç–∏—Ä–µ –µ—Å—Ç—å: {apartment.get('features', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

–û–∫—Ä—É–∂–µ–Ω–∏–µ: {apartment.get('nearby_attractions', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
"""

def format_subscription_info(subscription: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    return f"""
üìÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {subscription['status']}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {subscription['amount_rub']} —Ä—É–±. –≤ –º–µ—Å—è—Ü
üíé –í TON: {subscription['amount_ton']} TON
üìÖ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: {subscription['next_payment_date']}
"""

def validate_booking_dates(start_date: datetime, end_date: datetime, min_nights: int = 7) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if start_date >= end_date:
        return False
    
    nights = (end_date - start_date).days
    return nights >= min_nights

def format_ton_amount(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –≤ TON"""
    return f"{amount:.4f} TON"

def get_nearest_available_date(current_date: datetime, min_nights: int = 7) -> datetime:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –¢–ó: "—Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã + 7 –º–µ—Å—è—Ü–µ–≤", –∞ min_nights –ø–æ –¢–ó = 7
    # 30 –¥–Ω–µ–π * 7 –Ω–æ—á–µ–π = 210 –¥–Ω–µ–π, —á—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–≤–Ω–æ 7 –º–µ—Å—è—Ü–∞–º.
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ —á–µ—Ä–µ–∑ 7 –º–µ—Å—è—Ü–µ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14 –∏—é–Ω—è -> 14 —è–Ω–≤–∞—Ä—è),
    # —Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å dateutil.relativedelta. –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.
    return current_date + timedelta(days=30 * min_nights) 